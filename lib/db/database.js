// Generated by CoffeeScript 1.7.1
(function() {
  var Database, bookshelf, buildSchema, knex, uuid, winston;

  bookshelf = require('bookshelf');

  knex = require('knex');

  winston = require('winston');

  uuid = require('uuid');

  buildSchema = require('./schema');

  Database = (function() {
    function Database(config) {
      this.config = config;
      this.knex = knex(this.config);
      this.bookshelf = bookshelf(this.knex);
      this.ready = false;
      this.models = require('./models')(this.bookshelf);
      if (this.knex.client === 'sqlite3') {
        this.knex.raw('PRAGMA foreign_keys = ON;');
      }
      buildSchema(this.knex).then((function(_this) {
        return function() {
          winston.info('Database initialized');
          return _this.ready = true;
        };
      })(this))["catch"](function(err) {
        return winston.error('Database initialization failed', err, {});
      });
    }

    Database.prototype.genAPIKey = function() {
      var key;
      key = new Buffer(16);
      uuid.v4(null, key);
      return key.toString('base64');
    };

    Database.prototype.genFileHash = function(name) {
      var alphabet, code, hash, ts;
      alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      hash = function(str) {
        var h, i, x;
        h = 0;
        for (i in str) {
          x = str.charCodeAt(i);
          h = x + (h << 6) + (h << 16) - h;
        }
        return h & 0x7fffffff;
      };
      ts = Date.now();
      ts = (ts << 1) + (hash(name) % ts);
      ts = Math.abs(ts);
      code = '';
      while (ts > 0) {
        code += alphabet[ts % alphabet.length];
        ts = Math.floor(ts / alphabet.length);
      }
      return code;
    };

    Database.prototype.addUser = function() {
      var User;
      if (!this.ready) {
        throw new Error('Database has not been initialized yet');
      }
      User = this.models.User;
      return User.forge({
        key: this.genAPIKey()
      }).save();
    };

    Database.prototype.addImage = function(file, uploader_key) {
      var Image, data;
      if (uploader_key == null) {
        uploader_key = null;
      }
      data = {
        filename: [this.genFileHash(file.filename), file.extension].join('.')
      };
      if (uploader_key) {
        data.user_key = uploader_key;
      }
      Image = this.models.Image;
      return Image.forge(data).save();
    };

    return Database;

  })();

  module.exports = Database;

}).call(this);
