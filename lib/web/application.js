// Generated by CoffeeScript 1.7.1
(function() {
  var Application, BAD_REQUEST, INTERNAL_SERVER_ERROR, express, ms, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require('express');

  path = require('path');

  ms = require('ms');

  BAD_REQUEST = 400;

  INTERNAL_SERVER_ERROR = 500;

  Application = (function() {
    function Application(config, db) {
      var ext, extensions, host, imagePath, mime, port, _i, _len, _ref, _ref1;
      this.config = config;
      this.db = db;
      this.uploadImage = __bind(this.uploadImage, this);
      this.serveImage = __bind(this.serveImage, this);
      this.serveIndex = __bind(this.serveIndex, this);
      this.app = express();
      this.app.use(require('./authorization')(config, db));
      this.app.use(require('./fileparser')(config));
      this.app.use(require('./detectmime')(config));
      extensions = [
        (function() {
          var _i, _len, _ref, _results;
          _ref = this.config.allowedMimeTypes;
          _results = [];
          for (ext = _i = 0, _len = _ref.length; _i < _len; ext = ++_i) {
            mime = _ref[ext];
            _results.push(mime);
          }
          return _results;
        }).call(this)
      ];
      imagePath = "(" + (this.config.basePath.replace(/\//g, '\\/')) + "[a-zA-Z0-9]+\.(?:" + extensions + "))";
      this.app.get(new RegExp(imagePath), this.serveImage);
      this.app.post('/upload', this.uploadImage);
      this.app.put('/upload', this.uploadImage);
      this.app.get('/', this.serveIndex);
      _ref = this.config.bindAddresses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], host = _ref1[0], port = _ref1[1];
        this.app.listen(port, host);
      }
    }

    Application.prototype.serveIndex = function(req, res) {
      var Image, html;
      if (req.header(this.config.authHeader)) {
        Image = this.db.models.Image;
        return Image.fetchAll({
          user_key: req.header(this.config.authHeader)
        }).then(function(images) {
          var elems, html;
          elems = images.map(function(image) {
            return "<li><a href=\"" + (image.get('filename')) + "\">" + (image.get('filename')) + "</a></li>";
          });
          html = "<!doctype html>\n<html>\n    <head>\n        <title>Image List</title>\n        <meta charset=\"utf-8\">\n    </head>\n    <body>\n        <ul>\n            " + elems + "\n        </ul>\n    </body>\n</html>";
          return res.send(html);
        });
      } else {
        html = "<!doctype html>\n<html>\n    <head>\n        <title>Image List</title>\n        <meta charset=\"utf-8\">\n    </head>\n    <body>\n        Unable to list images (no <code>" + this.config.authHeader + "</code> header present)\n    </body>\n</html>";
        return res.send(html);
      }
    };

    Application.prototype.serveImage = function(req, res) {
      return res.sendFile(req.params[0], {
        root: this.config.storageDir
      });
    };

    Application.prototype.uploadImage = function(req, res) {
      var delay, file, limit;
      if (!req.files.image) {
        return res.status(BAD_REQUEST).json({
          error: 'Expected image in request body'
        });
      }
      if (!req.body.expiration && this.config.expirationLimit) {
        return res.status(BAD_REQUEST).json({
          error: 'Expiration is required'
        });
      }
      delay = null;
      if (req.body.expiration) {
        delay = ms(req.body.expiration);
        if (!delay) {
          return res.status(BAD_REQUEST).json({
            error: 'Invalid expiration'
          });
        } else if (delay > this.config.expirationLimit) {
          limit = ms(this.config.expirationLimit);
          return res.status(BAD_REQUEST).json({
            error: "Expiration exceeds limit of " + limit
          });
        }
      }
      file = req.files.image;
      file.expiration = delay;
      return this.db.addImage(file, req.header(this.config.authHeader)).then(function(image) {
        return res.json({
          filename: image.get('filename'),
          expires: image.get('expires')
        });
      })["catch"](function(err) {
        res.status(INTERNAL_SERVER_ERROR).json({
          error: 'Upload failed (database error)'
        });
        return winston.error('Upload failed:', err);
      });
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
