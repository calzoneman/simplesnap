// Generated by CoffeeScript 1.8.0
(function() {
  var Application, BAD_REQUEST, INTERNAL_SERVER_ERROR, NOT_FOUND, Promise, express, fs, ms, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require('express');

  path = require('path');

  ms = require('ms');

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  BAD_REQUEST = 400;

  NOT_FOUND = 404;

  INTERNAL_SERVER_ERROR = 500;

  Application = (function() {
    function Application(config, db) {
      var basePath, ext, extensions, host, imagePath, mime, port, _i, _len, _ref, _ref1;
      this.config = config;
      this.db = db;
      this.deleteImage = __bind(this.deleteImage, this);
      this.uploadImage = __bind(this.uploadImage, this);
      this.serveImage = __bind(this.serveImage, this);
      this.serveImageList = __bind(this.serveImageList, this);
      this.getFullImagePath = __bind(this.getFullImagePath, this);
      this.app = express();
      this.app.use(require('./authorization')(config, db));
      this.app.use(require('./fileparser')(config));
      this.app.use(require('./detectmime')(config));
      extensions = ((function() {
        var _ref, _results;
        _ref = this.config.allowedMimeTypes;
        _results = [];
        for (mime in _ref) {
          ext = _ref[mime];
          _results.push(ext);
        }
        return _results;
      }).call(this)).join('|');
      basePath = this.config.basePath.replace(/\//g, '\\/');
      imagePath = "" + basePath + "([a-zA-Z0-9]+\.(?:" + extensions + "))";
      this.app.get(new RegExp(imagePath), this.serveImage);
      this.app["delete"](new RegExp(imagePath), this.deleteImage);
      this.app.post("" + this.config.basePath + "upload", this.uploadImage);
      this.app.put("" + this.config.basePath + "upload", this.uploadImage);
      this.app.get("" + this.config.basePath + "images", this.serveImageList);
      this.app.get(this.config.basePath, this.serveIndex);
      this.app.use(this.errorHandler);
      _ref = this.config.bindAddresses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], host = _ref1[0], port = _ref1[1];
        this.app.listen(port, host);
      }
    }

    Application.prototype.getFullImagePath = function(req, filename) {
      var filepath;
      filepath = this.config.basePath + filename;
      return "" + req.protocol + "://" + (req.header('host')) + filepath;
    };

    Application.prototype.serveImageList = function(req, res) {
      var Image;
      if (req.header(this.config.authHeader)) {
        Image = this.db.models.Image;
        return Image.fetchAll({
          user_key: req.header(this.config.authHeader)
        }).then((function(_this) {
          return function(images) {
            var elems;
            elems = images.map(function(image) {
              return _this.getFullImagePath(req, image.get('filename'));
            });
            return res.json({
              images: elems
            });
          };
        })(this));
      } else {
        return res.json({
          error: "No " + this.config.authHeader + " header present"
        });
      }
    };

    Application.prototype.serveIndex = function(req, res) {
      var html;
      html = "<!doctype html>\n<html>\n    <head>\n        <title>Simplesnap</title>\n        <meta charset=\"utf-8\">\n    </head>\n    <body>\n        This server is running <a href=\"https://github.com/calzoneman/simplesnap\">simplesnap</a>.\n    </body>\n</html>";
      return res.send(html);
    };

    Application.prototype.serveImage = function(req, res) {
      return res.sendFile(req.params[0], {
        root: this.config.storageDir
      });
    };

    Application.prototype.uploadImage = function(req, res) {
      var data, delay, file, limit;
      if (!req.files.image) {
        return res.status(BAD_REQUEST).json({
          error: 'Expected image in request body'
        });
      }
      if (!req.body.expiration && this.config.expirationLimit) {
        return res.status(BAD_REQUEST).json({
          error: 'Expiration is required'
        });
      }
      delay = null;
      if (req.body.expiration) {
        delay = ms(req.body.expiration);
        if (!delay) {
          return res.status(BAD_REQUEST).json({
            error: 'Invalid expiration'
          });
        } else if (delay > this.config.expirationLimit) {
          limit = ms(this.config.expirationLimit);
          return res.status(BAD_REQUEST).json({
            error: "Expiration exceeds limit of " + limit
          });
        }
      }
      file = req.files.image;
      file.expiration = delay;
      data = null;
      return this.db.addImage(file, req.header(this.config.authHeader)).then((function(_this) {
        return function(image) {
          data = {
            filename: _this.getFullImagePath(req, image.get('filename')),
            expires: image.get('expires')
          };
          return fs.renameAsync(file.path, path.join(_this.config.storageDir, image.get('filename')));
        };
      })(this)).then(function() {
        return res.json(data);
      })["catch"](function(err) {
        res.status(INTERNAL_SERVER_ERROR).json({
          error: 'Unknown error'
        });
        return console.error('Upload failed:', err);
      });
    };

    Application.prototype.deleteImage = function(req, res) {
      var Image, filename;
      filename = req.params[0].replace(/^\//, '');
      Image = this.db.models.Image;
      return Image.forge({
        filename: filename
      }).fetch({
        require: true
      }).tap((function(_this) {
        return function(image) {
          return fs.unlinkAsync(path.join(_this.config.storageDir, filename));
        };
      })(this)).then(function(image) {
        return image.destroy();
      }).then((function(_this) {
        return function() {
          return res.json({
            deleted: _this.getFullImagePath(req, filename)
          });
        };
      })(this))["catch"](Image.NotFoundError, function(err) {
        return res.status(404).json({
          error: 'Image not found'
        });
      })["catch"](function(err) {
        res.status(INTERNAL_SERVER_ERROR).json({
          error: 'Unknown error'
        });
        return console.error('Deletion failed', err);
      });
    };

    Application.prototype.errorHandler = function(err, req, res, next) {
      var method;
      method = req.method.toLowerCase();
      if (err.code === 'ENOENT') {
        return res.sendStatus(NOT_FOUND);
      } else {
        console.error('HTTP Server Error', err);
        return res.status(INTERNAL_SERVER_ERROR).json({
          error: 'Internal server error'
        });
      }
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
