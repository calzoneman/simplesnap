#!/usr/bin/python

from __future__ import print_function
import os
import requests
import subprocess
import sys

GLOBAL_SIMPLESNAPRC = '/etc/simplesnap/client.conf'
LOCAL_SIMPLESNAPRC = os.path.join(os.getenv('HOME'), '.config',
    'simplesnap.conf')

# Utilities

ALLOWED_CONFIG_KEYS = set(['server', 'key'])
def load_config_file(filename):
    '''Internal function to load Simplesnap configuration files

    The expected format of each line is
        key=value

    If a line is invalid, an Exception is raised with the filename, error
    message, and line number
    '''

    config = {}
    with open(filename, 'r') as f:
        for i, line in enumerate(f):
            try:
                config.update([line.split('=')])
            except Exception as e:
                raise Exception(
                    'Configuration file {0} is invalid: '
                    '{1} on line {2}'.format(filename, e, i+1))
    return config

def load_config(args):
    '''Loads Simplesnap client configuration

    Loads from the following locations in order of increasing precedence:
      - /etc/simplesnap/client.conf
      - $HOME/.config/simplesnap.conf
      - args.config (if not None)
    '''

    config = { 'server': None, 'key': None }
    files = [GLOBAL_SIMPLESNAPRC, LOCAL_SIMPLESNAPRC]
    if args.config is not None:
        files.append(args.config)

    for f in files:
        if os.path.isfile(f):
            config.update(load_config_file(f))

    if args.server:
        config['server'] = args.server
    if args.key:
        config['key'] = args.key

    if not config['server']:
        raise Exception('Missing required configuration key "server" (tried '
            + ', '.join(files) + ')')

    return config

class Notification(object):
    '''Represents a notification message sent via notify-send

    Title and text are provided to notify-send as positional arguments.
    If timeout is not None, it represents the number of milliseconds that the
    notification should be active (default 2000)
    '''

    def __init__(self, title, text, timeout=2000):
        self.title = title
        self.text = text
        self.timeout = timeout

    def show(self):
        '''Calls notify-send to display the notification'''
        args = ['notify-send', self.title, self.text]
        if self.timeout is not None:
            args += ['-t', self.timeout]
        subprocess.call(args)

def copy_to_clipboard(text):
    '''Calls xclip to copy the given text to the clipboard'''
    subprocess.call(['xclip', '-i', '-selection', 'clipboard'], stdin=text)

def zenity_get_expiration():
    '''Uses a zenity prompt to ask the user for an expiration time'''
    args = [
        'zenity',
        '--list',
        '--title="Choose Expiration"',
        '--column="Expiration"',
        '10m',
        '1h',
        '12h',
        '1d',
        '7d',
        '30d',
        'Never'
    ]
    return subprocess.check_output(ZENITY_EXPIRATION_ARGS)

# Image uploads

def upload_image(filename, config, expiration=None):
    '''Uploads an image to a Simplesnap server'''
    url = '{0}/upload'.format(config['server'].rstrip('/'))
    files = {
        'image': open(filename, 'rb'),
    }
    data = {}

    if expiration == 'Never':
        expiration = 0

    if config['key']:
        data['key'] = config['key']
    if expiration is not None:
        data['expires'] = expiration

    r = requests.post(url, files=files, data=data)
    result = r.json()

    if 'error' in result:
        raise RuntimeError(result['error'])

    return result

def upload_image_interactive(args):
    try:
        config = load_config(args)
    except Exception as e:
        Notification('Upload failed', e).show()
        sys.exit(1)

    if args.expiration:
        expiration = args.expiration
    else:
        expiration = zenity_get_expiration()

    try:
        result = upload_image(args.image, config, expiration)
    except Exception as e:
        Notification('Upload failed', e).show()
        sys.exit(1)

    try:
        copy_to_clipboard(result['filename'])
    except Exception as e:
        Notification('Copy to clipboard failed', e).show()

    Notification('Upload succeeded', 'Uploaded {0} to {1}'.format(
        filename, result['filename'])).show()

def upload_image_cli(args):
    try:
        config = load_config(args)
    except Exception as e:
        print('Upload failed: {0}'.format(e), file=sys.stderr)
        sys.exit(1)

    try:
        result = upload_image(args.image, config, args.expiration)
    except Exception as e:
        print('Upload failed: {0}'.format(e), file=sys.stderr)
        sys.exit(1)

    print(result['filename'])

COMMAND_MAP = {
    'upload': upload_image_cli,
    'upload-interactive': upload_image_interactive
}

def main():
    import argparse

    p = argparse.ArgumentParser(description='Upload, list, and delete files '
        'on a Simplesnap server')
    p.add_argument('-c', '--config', help='Load a specified configuration file')
    p.add_argument('-e', '--expiration', help='Specify expiration for an upload')
    p.add_argument('-k', '--key', help='Specify the Simplesnap auth key to use')
    p.add_argument('-s', '--server', help='Specify the server to connect to')
    p.add_argument('command', choices=['upload', 'upload-interactive'])
    p.add_argument('image', help='Local path to image for uploading, or URL for '
        'deletion', nargs='?')

    import sys
    args = p.parse_args(sys.argv[1:])

    if not args.image and args.command != 'list':
        print('Positional argument image is required for command {0}'.format(
            args.command))
        sys.exit(1)

    COMMAND_MAP[args.command](args)

if __name__ == '__main__':
    main()
